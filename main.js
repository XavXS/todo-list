(()=>{"use strict";class t{#t;constructor(t,e){this._title=t,this._desc=e,this.#t=[]}get title(){return this._title}set title(t){this._name=t}get desc(){return this._desc}set desc(t){this._desc=t}addTask(t){t?this.#t.push(t):this.#t.push(new t("New Task","Enter Description",new Date,1))}getTasks(){return this.#t}}class e{constructor(t,e,n,r){this._title=t,this._desc=e,this._due=n,this._prio=r}get title(){return this._title}set title(t){this._title=t}get desc(){return this._desc}set desc(t){this._desc=t}get due(){return this._due}set due(t){this._due=t}get prio(){return this._prio}set prio(t){this._prio=t}}Math.pow(10,8);var n=36e5;function r(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function o(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function a(t,e){var n;r(1,arguments);var a=o(null!==(n=null==e?void 0:e.additionalDigits)&&void 0!==n?n:2);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var i,s=l(t);if(s.date){var c=d(s.date,a);i=f(c.restDateString,c.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var u,m=i.getTime(),g=0;if(s.time&&(g=p(s.time),isNaN(g)))return new Date(NaN);if(!s.timezone){var v=new Date(m+g),b=new Date(0);return b.setFullYear(v.getUTCFullYear(),v.getUTCMonth(),v.getUTCDate()),b.setHours(v.getUTCHours(),v.getUTCMinutes(),v.getUTCSeconds(),v.getUTCMilliseconds()),b}return u=h(s.timezone),isNaN(u)?new Date(NaN):new Date(m+g+u)}var i={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},s=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,c=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,u=/^([+-])(\d{2})(?::?(\d{2}))?$/;function l(t){var e,n={},r=t.split(i.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?e=r[0]:(n.date=r[0],e=r[1],i.timeZoneDelimiter.test(n.date)&&(n.date=t.split(i.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var o=i.timezone.exec(e);o?(n.time=e.replace(o[1],""),n.timezone=o[1]):n.time=e}return n}function d(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:t.slice((r[1]||r[2]).length)}}function f(t,e){if(null===e)return new Date(NaN);var n=t.match(s);if(!n)return new Date(NaN);var r=!!n[4],o=m(n[1]),a=m(n[2])-1,i=m(n[3]),c=m(n[4]),u=m(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,c,u)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var o=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(e,c,u):new Date(NaN);var l=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(v[e]||(b(t)?29:28))}(e,a,i)&&function(t,e){return e>=1&&e<=(b(t)?366:365)}(e,o)?(l.setUTCFullYear(e,a,Math.max(o,i)),l):new Date(NaN)}function m(t){return t?parseInt(t):1}function p(t){var e=t.match(c);if(!e)return NaN;var r=g(e[1]),o=g(e[2]),a=g(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(r,o,a)?r*n+6e4*o+1e3*a:NaN}function g(t){return t&&parseFloat(t.replace(",","."))||0}function h(t){if("Z"===t)return 0;var e=t.match(u);if(!e)return 0;var r="+"===e[1]?-1:1,o=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?r*(o*n+6e4*a):NaN}var v=[31,null,31,30,31,30,31,31,30,31,30,31];function b(t){return t%400==0||t%4==0&&t%100!=0}let y,N,w,S=[],k=[],D=[];function _(){return k}function T(t){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},T(t)}function E(t){r(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===T(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function C(t){r(1,arguments);var e=E(t);return e.setHours(0,0,0,0),e}function q(t,e){r(2,arguments);var n=C(t),o=C(e);return n.getTime()===o.getTime()}function L(){let t=document.querySelector("#content");t.appendChild(y),t.appendChild(N),t.appendChild(w),j(document.querySelector("#day"))}function j(t){document.querySelectorAll(".time").forEach((t=>t.classList.remove("active"))),t.classList.add("active"),function(t){let e=_();switch(N.textContent="",t){case"day":let n=e.filter((t=>function(t){return r(1,arguments),q(t,Date.now())}(t.due))).sort(((t,e)=>e.due-t.due));n.forEach((t=>{N.appendChild(function(t){let e=document.createElement("div");return e.innerHTML="<div class='basic'><div><input type='text'><input type='date'></div><div><input type='checkbox'><button class='delete-task'>âœ–</button></div></div><div class='details><div class='priorities'><button class='priority'>1</button><button class='priority'>2</button><button class='priority'>3</button><button class='priority'>4</button><button class='priority'>5</button></div><textarea class='description'></textarea></div>",e}())}));break;case"week":case"month":case"year":case"all":break;default:throw"could not find"+t+"!"}}(t.id)}function U(t){document.querySelectorAll(".tab").forEach((t=>{t.classList.remove("active")})),t.classList.add("active")}!function(){console.log("retrieving projects data...");let n=JSON.parse(localStorage.getItem("projects"));n?(console.log("found projects data:\n"+n),n.forEach((n=>{console.log("found project data:\n"+n);let r=new t(n.title,n.desc);n.tasks.forEach((t=>{console.log("found task data:\n"+t),r.addTask(new e(t._title,t._desc,a(t._due),t._prio))})),console.log("assembled project:\n"+r),S.push(r)}))):console.log("projects data could not be found")}(),function(){let t=JSON.parse(localStorage.getItem("tasks"));t?(console.log("tasks found:\n"+t),t.forEach((t=>{k.push(new e(t._title,t._desc,a(t._due),t._prio))})),console.log(k)):console.log("tasks not found")}(),function(){let t=JSON.parse(localStorage.getItem("notes"));t&&t.forEach((t=>{D.push(t._title,t._desc,t._color)}))}(),document.querySelector("#tasks-tab").addEventListener("click",(t=>{U(t.target),L()})),document.querySelector("#projects-tab").addEventListener("click",(t=>{U(t.target),document.querySelector("#content").textContent=""})),document.querySelector("#notes-tab").addEventListener("click",(t=>{U(t.target),document.querySelector("#content").textContent=""})),U(document.querySelector("#tasks-tab")),function(){let t=document.createElement("div");t.id="times",t.innerHTML="<button id='day' class='time'>Day</button><button id='week' class='time'>Week</button><button id='month' class='time'>Month</button><button id='year' class='time'>Year</button><button id='all' class='time'>All</button>",t.querySelector("#day").addEventListener("click",(t=>j(t.target))),t.querySelector("#week").addEventListener("click",(t=>j(t.target))),t.querySelector("#month").addEventListener("click",(t=>j(t.target))),t.querySelector("#year").addEventListener("click",(t=>j(t.target))),t.querySelector("#all").addEventListener("click",(t=>j(t.target))),y=t}(),function(){let t=document.createElement("div");t.id="task-list",N=t}(),function(){let t=document.createElement("button");t.id="add-btn",t.textContent="+",t.addEventListener("click",(()=>{return console.log("creating task.."),void(t?k.push(t):(k.push(new e("New Task","Enter Description",new Date,1)),console.log(k),localStorage.setItem("tasks",JSON.stringify(k)),console.log(JSON.stringify(k))));var t})),w=t}(),L()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VUFDbEJ5QyxpQkFBaUIsU0FBU25DLEdBQUtKLEVBQWNJLEVBQUVvQyxVQUVwREMsRUFBUzNDLGNBQWMsU0FDbEJ5QyxpQkFBaUIsU0FBU25DLEdBQUtKLEVBQWNJLEVBQUVvQyxVQUVwREMsRUFBUzNDLGNBQWMsUUFDbEJ5QyxpQkFBaUIsU0FBU25DLEdBQUtKLEVBQWNJLEVBQUVvQyxVQUVwRG5FLEVBQVFvRSxDQUNaLENBdkRJQyxHQWFKLFdBQ0ksSUFBSUMsRUFBYzlDLFNBQVNxQixjQUFjLE9BQ3pDeUIsRUFBWXRCLEdBQUssWUFDakIvQyxFQUFXcUUsQ0FDZixDQWhCSUMsR0FrQkosV0FDSSxJQUFJQyxFQUFZaEQsU0FBU3FCLGNBQWMsVUFDdkMyQixFQUFVeEIsR0FBSyxVQUNmd0IsRUFBVXJDLFlBQWMsSUFDeEJxQyxFQUFVTixpQkFBaUIsU0FBUyxLQUFNLE9EeUUxQ3RELFFBQVFzQyxJQUFJLHdCQUNUdUIsRUFDQ3JFLEVBQU12SCxLQUFLNEwsSUFHZnJFLEVBQU12SCxLQUNGLElBQUlELEVBQ0EsV0FDQSxvQkFDQSxJQUFJRSxLQUNKLElBR1I4SCxRQUFRc0MsSUFBSTlDLEdBS1prRCxhQUFhb0IsUUFBUSxRQUFTdEIsS0FBS3VCLFVBQVV2RSxJQUM3Q1EsUUFBUXNDLElBQUlFLEtBQUt1QixVQUFVdkUsTUFwQnhCLElBQW9CcUUsQ0N4RXVDLElBQzlEdkUsRUFBU3NFLENBQ2IsQ0F2QklJLEdLdUJBLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QtZm9ycmVhbC8uL3NyYy9tb2R1bGVzL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWZvcnJlYWwvLi9zcmMvbW9kdWxlcy90YXNrLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1mb3JyZWFsLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb25zdGFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWZvcnJlYWwvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1mb3JyZWFsLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtZm9ycmVhbC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2VJU08vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWZvcnJlYWwvLi9zcmMvbW9kdWxlcy9zdG9yYWdlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1mb3JyZWFsLy4vc3JjL21vZHVsZXMvdWkvdGFza1VJLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1mb3JyZWFsLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWZvcnJlYWwvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWZvcnJlYWwvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzU2FtZURheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtZm9ycmVhbC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNUb2RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtZm9ycmVhbC8uL3NyYy9tb2R1bGVzL3VpL3VpLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1mb3JyZWFsLy4vc3JjL21vZHVsZXMvdWkvcHJvamVjdFVJLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1mb3JyZWFsLy4vc3JjL21vZHVsZXMvdWkvbm90ZVVJLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0YXNrIGZyb20gJy4vdGFzayc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBwcm9qZWN0IHtcbiAgICBcbiAgICAjdGFza3M7XG5cbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgZGVzYykge1xuICAgICAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLl9kZXNjID0gZGVzYztcbiAgICAgICAgdGhpcy4jdGFza3MgPSBbXTtcbiAgICB9XG5cbiAgICBnZXQgdGl0bGUoKSB7IHJldHVybiB0aGlzLl90aXRsZTsgfVxuICAgIHNldCB0aXRsZShuZXdUaXRsZSkgeyB0aGlzLl9uYW1lID0gbmV3VGl0bGU7IH1cblxuICAgIGdldCBkZXNjKCkgeyByZXR1cm4gdGhpcy5fZGVzYzsgfVxuICAgIHNldCBkZXNjKG5ld0Rlc2MpIHsgdGhpcy5fZGVzYyA9IG5ld0Rlc2M7IH1cblxuICAgIGFkZFRhc2sodGFzaykge1xuICAgICAgICBpZih0YXNrKSB7XG4gICAgICAgICAgICB0aGlzLiN0YXNrcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3Rhc2tzLnB1c2goXG4gICAgICAgICAgICBuZXcgdGFzayhcbiAgICAgICAgICAgICAgICAnTmV3IFRhc2snLFxuICAgICAgICAgICAgICAgICdFbnRlciBEZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAgICAgbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0VGFza3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiN0YXNrcztcbiAgICB9XG59OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIHRhc2sge1xuICAgIGNvbnN0cnVjdG9yKHRpdGxlLCBkZXNjLCBkdWUsIHByaW8pIHtcbiAgICAgICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5fZGVzYyA9IGRlc2M7XG4gICAgICAgIHRoaXMuX2R1ZSA9IGR1ZTtcbiAgICAgICAgdGhpcy5fcHJpbyA9IHByaW87XG4gICAgfVxuXG4gICAgZ2V0IHRpdGxlKCkgeyByZXR1cm4gdGhpcy5fdGl0bGU7IH1cbiAgICBzZXQgdGl0bGUobmV3VGl0bGUpIHsgdGhpcy5fdGl0bGUgPSBuZXdUaXRsZTsgfTtcblxuICAgIGdldCBkZXNjKCkgeyByZXR1cm4gdGhpcy5fZGVzYzsgfVxuICAgIHNldCBkZXNjKG5ld0Rlc2MpIHsgdGhpcy5fZGVzYyA9IG5ld0Rlc2M7IH1cblxuICAgIGdldCBkdWUoKSB7IHJldHVybiB0aGlzLl9kdWU7IH1cbiAgICBzZXQgZHVlKG5ld0R1ZSkgeyB0aGlzLl9kdWUgPSBuZXdEdWU7IH1cblxuICAgIGdldCBwcmlvKCkgeyByZXR1cm4gdGhpcy5fcHJpbzsgfVxuICAgIHNldCBwcmlvKG5ld1ByaW8pIHsgdGhpcy5fcHJpbyA9IG5ld1ByaW87IH07XG59IiwiLyoqXG4gKiBEYXlzIGluIDEgd2Vlay5cbiAqXG4gKiBAbmFtZSBkYXlzSW5XZWVrXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIGRheXNJbldlZWsgPSA3O1xuLyoqXG4gKiBEYXlzIGluIDEgeWVhclxuICogT25lIHllYXJzIGVxdWFscyAzNjUuMjQyNSBkYXlzIGFjY29yZGluZyB0byB0aGUgZm9ybXVsYTpcbiAqXG4gKiA+IExlYXAgeWVhciBvY2N1cmVzIGV2ZXJ5IDQgeWVhcnMsIGV4Y2VwdCBmb3IgeWVhcnMgdGhhdCBhcmUgZGl2aXNhYmxlIGJ5IDEwMCBhbmQgbm90IGRpdmlzYWJsZSBieSA0MDAuXG4gKiA+IDEgbWVhbiB5ZWFyID0gKDM2NSsxLzQtMS8xMDArMS80MDApIGRheXMgPSAzNjUuMjQyNSBkYXlzXG4gKlxuICogQG5hbWUgZGF5c0luWWVhclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIGRheXNJblllYXIgPSAzNjUuMjQyNTtcbi8qKlxuICogTWF4aW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQG5hbWUgbWF4VGltZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1heFRpbWUgPSBNYXRoLnBvdygxMCwgOCkgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuLyoqXG4gKiBNaWxsaXNlY29uZHMgaW4gMSBtaW51dGVcbiAqXG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJbk1pbnV0ZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luTWludXRlID0gNjAwMDA7XG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIGhvdXJcbiAqXG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtaWxsaXNlY29uZHNJbkhvdXIgPSAzNjAwMDAwO1xuLyoqXG4gKiBNaWxsaXNlY29uZHMgaW4gMSBzZWNvbmRcbiAqXG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJblNlY29uZFxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luU2Vjb25kID0gMTAwMDtcbi8qKlxuICogTWluaW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQG5hbWUgbWluVGltZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pblRpbWUgPSAtbWF4VGltZTtcbi8qKlxuICogTWludXRlcyBpbiAxIGhvdXJcbiAqXG4gKiBAbmFtZSBtaW51dGVzSW5Ib3VyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWludXRlc0luSG91ciA9IDYwO1xuLyoqXG4gKiBNb250aHMgaW4gMSBxdWFydGVyXG4gKlxuICogQG5hbWUgbW9udGhzSW5RdWFydGVyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbW9udGhzSW5RdWFydGVyID0gMztcbi8qKlxuICogTW9udGhzIGluIDEgeWVhclxuICpcbiAqIEBuYW1lIG1vbnRoc0luWWVhclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1vbnRoc0luWWVhciA9IDEyO1xuLyoqXG4gKiBRdWFydGVycyBpbiAxIHllYXJcbiAqXG4gKiBAbmFtZSBxdWFydGVyc0luWWVhclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHF1YXJ0ZXJzSW5ZZWFyID0gNDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIGhvdXJcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5Ib3VyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgc2Vjb25kc0luSG91ciA9IDM2MDA7XG4vKipcbiAqIFNlY29uZHMgaW4gMSBtaW51dGVcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5NaW51dGVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBzZWNvbmRzSW5NaW51dGUgPSA2MDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIGRheVxuICpcbiAqIEBuYW1lIHNlY29uZHNJbkRheVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJbkRheSA9IHNlY29uZHNJbkhvdXIgKiAyNDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIHdlZWtcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5XZWVrXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgc2Vjb25kc0luV2VlayA9IHNlY29uZHNJbkRheSAqIDc7XG4vKipcbiAqIFNlY29uZHMgaW4gMSB5ZWFyXG4gKlxuICogQG5hbWUgc2Vjb25kc0luWWVhclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJblllYXIgPSBzZWNvbmRzSW5EYXkgKiBkYXlzSW5ZZWFyO1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgbW9udGhcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5Nb250aFxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJbk1vbnRoID0gc2Vjb25kc0luWWVhciAvIDEyO1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgcXVhcnRlclxuICpcbiAqIEBuYW1lIHNlY29uZHNJblF1YXJ0ZXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBzZWNvbmRzSW5RdWFydGVyID0gc2Vjb25kc0luTW9udGggKiAzOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5Ib3VyLCBtaWxsaXNlY29uZHNJbk1pbnV0ZSB9IGZyb20gXCIuLi9jb25zdGFudHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBwYXJzZUlTT1xuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBQYXJzZSBJU08gc3RyaW5nXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gc3RyaW5nIGluIElTTyA4NjAxIGZvcm1hdCBhbmQgcmV0dXJuIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogRnVuY3Rpb24gYWNjZXB0cyBjb21wbGV0ZSBJU08gODYwMSBmb3JtYXRzIGFzIHdlbGwgYXMgcGFydGlhbCBpbXBsZW1lbnRhdGlvbnMuXG4gKiBJU08gODYwMTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMVxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpc24ndCBhIHN0cmluZywgdGhlIGZ1bmN0aW9uIGNhbm5vdCBwYXJzZSB0aGUgc3RyaW5nIG9yXG4gKiB0aGUgdmFsdWVzIGFyZSBpbnZhbGlkLCBpdCByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0gezB8MXwyfSBbb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzPTJdIC0gdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzYCBtdXN0IGJlIDAsIDEgb3IgMlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnMjAxNC0wMi0xMVQxMTozMDozMCcgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHBhcnNlSVNPKCcyMDE0LTAyLTExVDExOjMwOjMwJylcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcrMDIwMTQxMDEnIHRvIGRhdGUsXG4gKiAvLyBpZiB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdCBpcyAxOlxuICogY29uc3QgcmVzdWx0ID0gcGFyc2VJU08oJyswMjAxNDEwMScsIHsgYWRkaXRpb25hbERpZ2l0czogMSB9KVxuICogLy89PiBGcmkgQXByIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUlTTyhhcmd1bWVudCwgb3B0aW9ucykge1xuICB2YXIgX29wdGlvbnMkYWRkaXRpb25hbERpO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYWRkaXRpb25hbERpZ2l0cyA9IHRvSW50ZWdlcigoX29wdGlvbnMkYWRkaXRpb25hbERpID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMpICE9PSBudWxsICYmIF9vcHRpb25zJGFkZGl0aW9uYWxEaSAhPT0gdm9pZCAwID8gX29wdGlvbnMkYWRkaXRpb25hbERpIDogMik7XG5cbiAgaWYgKGFkZGl0aW9uYWxEaWdpdHMgIT09IDIgJiYgYWRkaXRpb25hbERpZ2l0cyAhPT0gMSAmJiBhZGRpdGlvbmFsRGlnaXRzICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2FkZGl0aW9uYWxEaWdpdHMgbXVzdCBiZSAwLCAxIG9yIDInKTtcbiAgfVxuXG4gIGlmICghKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgU3RyaW5nXScpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgZGF0ZVN0cmluZ3MgPSBzcGxpdERhdGVTdHJpbmcoYXJndW1lbnQpO1xuICB2YXIgZGF0ZTtcblxuICBpZiAoZGF0ZVN0cmluZ3MuZGF0ZSkge1xuICAgIHZhciBwYXJzZVllYXJSZXN1bHQgPSBwYXJzZVllYXIoZGF0ZVN0cmluZ3MuZGF0ZSwgYWRkaXRpb25hbERpZ2l0cyk7XG4gICAgZGF0ZSA9IHBhcnNlRGF0ZShwYXJzZVllYXJSZXN1bHQucmVzdERhdGVTdHJpbmcsIHBhcnNlWWVhclJlc3VsdC55ZWFyKTtcbiAgfVxuXG4gIGlmICghZGF0ZSB8fCBpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIHRpbWUgPSAwO1xuICB2YXIgb2Zmc2V0O1xuXG4gIGlmIChkYXRlU3RyaW5ncy50aW1lKSB7XG4gICAgdGltZSA9IHBhcnNlVGltZShkYXRlU3RyaW5ncy50aW1lKTtcblxuICAgIGlmIChpc05hTih0aW1lKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGVTdHJpbmdzLnRpbWV6b25lKSB7XG4gICAgb2Zmc2V0ID0gcGFyc2VUaW1lem9uZShkYXRlU3RyaW5ncy50aW1lem9uZSk7XG5cbiAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBkaXJ0eURhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lKTsgLy8ganMgcGFyc2VkIHN0cmluZyBhc3N1bWluZyBpdCdzIGluIFVUQyB0aW1lem9uZVxuICAgIC8vIGJ1dCB3ZSBuZWVkIGl0IHRvIGJlIHBhcnNlZCBpbiBvdXIgdGltZXpvbmVcbiAgICAvLyBzbyB3ZSB1c2UgdXRjIHZhbHVlcyB0byBidWlsZCBkYXRlIGluIG91ciB0aW1lem9uZS5cbiAgICAvLyBZZWFyIHZhbHVlcyBmcm9tIDAgdG8gOTkgbWFwIHRvIHRoZSB5ZWFycyAxOTAwIHRvIDE5OTlcbiAgICAvLyBzbyBzZXQgeWVhciBleHBsaWNpdGx5IHdpdGggc2V0RnVsbFllYXIuXG5cbiAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoMCk7XG4gICAgcmVzdWx0LnNldEZ1bGxZZWFyKGRpcnR5RGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkaXJ0eURhdGUuZ2V0VVRDTW9udGgoKSwgZGlydHlEYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgcmVzdWx0LnNldEhvdXJzKGRpcnR5RGF0ZS5nZXRVVENIb3VycygpLCBkaXJ0eURhdGUuZ2V0VVRDTWludXRlcygpLCBkaXJ0eURhdGUuZ2V0VVRDU2Vjb25kcygpLCBkaXJ0eURhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSArIG9mZnNldCk7XG59XG52YXIgcGF0dGVybnMgPSB7XG4gIGRhdGVUaW1lRGVsaW1pdGVyOiAvW1QgXS8sXG4gIHRpbWVab25lRGVsaW1pdGVyOiAvW1ogXS9pLFxuICB0aW1lem9uZTogLyhbWistXS4qKSQvXG59O1xudmFyIGRhdGVSZWdleCA9IC9eLT8oPzooXFxkezN9KXwoXFxkezJ9KSg/Oi0/KFxcZHsyfSkpP3xXKFxcZHsyfSkoPzotPyhcXGR7MX0pKT98KSQvO1xudmFyIHRpbWVSZWdleCA9IC9eKFxcZHsyfSg/OlsuLF1cXGQqKT8pKD86Oj8oXFxkezJ9KD86Wy4sXVxcZCopPykpPyg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8kLztcbnZhciB0aW1lem9uZVJlZ2V4ID0gL14oWystXSkoXFxkezJ9KSg/Ojo/KFxcZHsyfSkpPyQvO1xuXG5mdW5jdGlvbiBzcGxpdERhdGVTdHJpbmcoZGF0ZVN0cmluZykge1xuICB2YXIgZGF0ZVN0cmluZ3MgPSB7fTtcbiAgdmFyIGFycmF5ID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy5kYXRlVGltZURlbGltaXRlcik7XG4gIHZhciB0aW1lU3RyaW5nOyAvLyBUaGUgcmVnZXggbWF0Y2ggc2hvdWxkIG9ubHkgcmV0dXJuIGF0IG1heGltdW0gdHdvIGFycmF5IGVsZW1lbnRzLlxuICAvLyBbZGF0ZV0sIFt0aW1lXSwgb3IgW2RhdGUsIHRpbWVdLlxuXG4gIGlmIChhcnJheS5sZW5ndGggPiAyKSB7XG4gICAgcmV0dXJuIGRhdGVTdHJpbmdzO1xuICB9XG5cbiAgaWYgKC86Ly50ZXN0KGFycmF5WzBdKSkge1xuICAgIHRpbWVTdHJpbmcgPSBhcnJheVswXTtcbiAgfSBlbHNlIHtcbiAgICBkYXRlU3RyaW5ncy5kYXRlID0gYXJyYXlbMF07XG4gICAgdGltZVN0cmluZyA9IGFycmF5WzFdO1xuXG4gICAgaWYgKHBhdHRlcm5zLnRpbWVab25lRGVsaW1pdGVyLnRlc3QoZGF0ZVN0cmluZ3MuZGF0ZSkpIHtcbiAgICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLnRpbWVab25lRGVsaW1pdGVyKVswXTtcbiAgICAgIHRpbWVTdHJpbmcgPSBkYXRlU3RyaW5nLnN1YnN0cihkYXRlU3RyaW5ncy5kYXRlLmxlbmd0aCwgZGF0ZVN0cmluZy5sZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aW1lU3RyaW5nKSB7XG4gICAgdmFyIHRva2VuID0gcGF0dGVybnMudGltZXpvbmUuZXhlYyh0aW1lU3RyaW5nKTtcblxuICAgIGlmICh0b2tlbikge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmcucmVwbGFjZSh0b2tlblsxXSwgJycpO1xuICAgICAgZGF0ZVN0cmluZ3MudGltZXpvbmUgPSB0b2tlblsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGVTdHJpbmdzO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZGF0ZVN0cmluZywgYWRkaXRpb25hbERpZ2l0cykge1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCdeKD86KFxcXFxkezR9fFsrLV1cXFxcZHsnICsgKDQgKyBhZGRpdGlvbmFsRGlnaXRzKSArICd9KXwoXFxcXGR7Mn18WystXVxcXFxkeycgKyAoMiArIGFkZGl0aW9uYWxEaWdpdHMpICsgJ30pJCknKTtcbiAgdmFyIGNhcHR1cmVzID0gZGF0ZVN0cmluZy5tYXRjaChyZWdleCk7IC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXG5cbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIHtcbiAgICB5ZWFyOiBOYU4sXG4gICAgcmVzdERhdGVTdHJpbmc6ICcnXG4gIH07XG4gIHZhciB5ZWFyID0gY2FwdHVyZXNbMV0gPyBwYXJzZUludChjYXB0dXJlc1sxXSkgOiBudWxsO1xuICB2YXIgY2VudHVyeSA9IGNhcHR1cmVzWzJdID8gcGFyc2VJbnQoY2FwdHVyZXNbMl0pIDogbnVsbDsgLy8gZWl0aGVyIHllYXIgb3IgY2VudHVyeSBpcyBudWxsLCBub3QgYm90aFxuXG4gIHJldHVybiB7XG4gICAgeWVhcjogY2VudHVyeSA9PT0gbnVsbCA/IHllYXIgOiBjZW50dXJ5ICogMTAwLFxuICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKChjYXB0dXJlc1sxXSB8fCBjYXB0dXJlc1syXSkubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZVN0cmluZywgeWVhcikge1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICBpZiAoeWVhciA9PT0gbnVsbCkgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIHZhciBjYXB0dXJlcyA9IGRhdGVTdHJpbmcubWF0Y2goZGF0ZVJlZ2V4KTsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHN0cmluZ1xuXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgaXNXZWVrRGF0ZSA9ICEhY2FwdHVyZXNbNF07XG4gIHZhciBkYXlPZlllYXIgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1vbnRoID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1syXSkgLSAxO1xuICB2YXIgZGF5ID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1szXSk7XG4gIHZhciB3ZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s0XSk7XG4gIHZhciBkYXlPZldlZWsgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzVdKSAtIDE7XG5cbiAgaWYgKGlzV2Vla0RhdGUpIHtcbiAgICBpZiAoIXZhbGlkYXRlV2Vla0RhdGUoeWVhciwgd2VlaywgZGF5T2ZXZWVrKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRheU9mSVNPV2Vla1llYXIoeWVhciwgd2VlaywgZGF5T2ZXZWVrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuXG4gICAgaWYgKCF2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRheSkgfHwgIXZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG5cbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBNYXRoLm1heChkYXlPZlllYXIsIGRheSkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF0ZVVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gcGFyc2VJbnQodmFsdWUpIDogMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lKHRpbWVTdHJpbmcpIHtcbiAgdmFyIGNhcHR1cmVzID0gdGltZVN0cmluZy5tYXRjaCh0aW1lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gTmFOOyAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgdGltZVxuXG4gIHZhciBob3VycyA9IHBhcnNlVGltZVVuaXQoY2FwdHVyZXNbMV0pO1xuICB2YXIgbWludXRlcyA9IHBhcnNlVGltZVVuaXQoY2FwdHVyZXNbMl0pO1xuICB2YXIgc2Vjb25kcyA9IHBhcnNlVGltZVVuaXQoY2FwdHVyZXNbM10pO1xuXG4gIGlmICghdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICByZXR1cm4gaG91cnMgKiBtaWxsaXNlY29uZHNJbkhvdXIgKyBtaW51dGVzICogbWlsbGlzZWNvbmRzSW5NaW51dGUgKyBzZWNvbmRzICogMTAwMDtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lVW5pdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgcGFyc2VGbG9hdCh2YWx1ZS5yZXBsYWNlKCcsJywgJy4nKSkgfHwgMDtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lem9uZSh0aW1lem9uZVN0cmluZykge1xuICBpZiAodGltZXpvbmVTdHJpbmcgPT09ICdaJykgcmV0dXJuIDA7XG4gIHZhciBjYXB0dXJlcyA9IHRpbWV6b25lU3RyaW5nLm1hdGNoKHRpbWV6b25lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gMDtcbiAgdmFyIHNpZ24gPSBjYXB0dXJlc1sxXSA9PT0gJysnID8gLTEgOiAxO1xuICB2YXIgaG91cnMgPSBwYXJzZUludChjYXB0dXJlc1syXSk7XG4gIHZhciBtaW51dGVzID0gY2FwdHVyZXNbM10gJiYgcGFyc2VJbnQoY2FwdHVyZXNbM10pIHx8IDA7XG5cbiAgaWYgKCF2YWxpZGF0ZVRpbWV6b25lKGhvdXJzLCBtaW51dGVzKSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICByZXR1cm4gc2lnbiAqIChob3VycyAqIG1pbGxpc2Vjb25kc0luSG91ciArIG1pbnV0ZXMgKiBtaWxsaXNlY29uZHNJbk1pbnV0ZSk7XG59XG5cbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGlzb1dlZWtZZWFyLCAwLCA0KTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeURheSA9IGRhdGUuZ2V0VVRDRGF5KCkgfHwgNztcbiAgdmFyIGRpZmYgPSAod2VlayAtIDEpICogNyArIGRheSArIDEgLSBmb3VydGhPZkphbnVhcnlEYXk7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpO1xuICByZXR1cm4gZGF0ZTtcbn0gLy8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcbi8vIEZlYnJ1YXJ5IGlzIG51bGwgdG8gaGFuZGxlIHRoZSBsZWFwIHllYXIgKHVzaW5nIHx8KVxuXG5cbnZhciBkYXlzSW5Nb250aHMgPSBbMzEsIG51bGwsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcblxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSB7XG4gIHJldHVybiBtb250aCA+PSAwICYmIG1vbnRoIDw9IDExICYmIGRhdGUgPj0gMSAmJiBkYXRlIDw9IChkYXlzSW5Nb250aHNbbW9udGhdIHx8IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAyOSA6IDI4KSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpIHtcbiAgcmV0dXJuIGRheU9mWWVhciA+PSAxICYmIGRheU9mWWVhciA8PSAoaXNMZWFwWWVhckluZGV4KHllYXIpID8gMzY2IDogMzY1KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVXZWVrRGF0ZShfeWVhciwgd2VlaywgZGF5KSB7XG4gIHJldHVybiB3ZWVrID49IDEgJiYgd2VlayA8PSA1MyAmJiBkYXkgPj0gMCAmJiBkYXkgPD0gNjtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gIGlmIChob3VycyA9PT0gMjQpIHtcbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCAmJiBzZWNvbmRzID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIHNlY29uZHMgPj0gMCAmJiBzZWNvbmRzIDwgNjAgJiYgbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPCA2MCAmJiBob3VycyA+PSAwICYmIGhvdXJzIDwgMjU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZXpvbmUoX2hvdXJzLCBtaW51dGVzKSB7XG4gIHJldHVybiBtaW51dGVzID49IDAgJiYgbWludXRlcyA8PSA1OTtcbn0iLCJpbXBvcnQgcHJvamVjdCBmcm9tICcuL3Byb2plY3QnO1xuaW1wb3J0IHRhc2sgZnJvbSAnLi90YXNrJztcbmltcG9ydCBub3RlIGZyb20gJy4vbm90ZSc7XG5pbXBvcnQgcGFyc2VJU08gZnJvbSAnZGF0ZS1mbnMvcGFyc2VJU08nXG5cbmxldCBwcm9qZWN0cyA9IFtdO1xubGV0IHRhc2tzID0gW107XG5sZXQgbm90ZXMgPSBbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJldHJpZXZlRGF0YSgpIHtcbiAgICAvL2xvY2FsU3RvcmFnZS5zZXRJdGVtKCd0YXNrcycsIG51bGwpO1xuICAgIHJldHJpZXZlUHJvamVjdHMoKTtcbiAgICByZXRyaWV2ZVRhc2tzKCk7XG4gICAgcmV0cmlldmVOb3RlcygpO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVByb2plY3RzKCkge1xuICAgIGNvbnNvbGUubG9nKCdyZXRyaWV2aW5nIHByb2plY3RzIGRhdGEuLi4nKTtcblxuICAgIGxldCBwcm9qZWN0c0RhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0cycpKTtcbiAgICBpZighcHJvamVjdHNEYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwcm9qZWN0cyBkYXRhIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ2ZvdW5kIHByb2plY3RzIGRhdGE6XFxuJyArIHByb2plY3RzRGF0YSk7XG5cbiAgICBwcm9qZWN0c0RhdGEuZm9yRWFjaChwID0+IHtcblxuICAgICAgICBjb25zb2xlLmxvZygnZm91bmQgcHJvamVjdCBkYXRhOlxcbicgKyBwKTtcblxuICAgICAgICBsZXQgbmV3UHJvamVjdCA9IG5ldyBwcm9qZWN0KHAudGl0bGUsIHAuZGVzYyk7XG4gICAgICAgIHAudGFza3MuZm9yRWFjaCh0ID0+IHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvdW5kIHRhc2sgZGF0YTpcXG4nICsgdCk7XG5cbiAgICAgICAgICAgIG5ld1Byb2plY3QuYWRkVGFzayhcbiAgICAgICAgICAgICAgICBuZXcgdGFzayhcbiAgICAgICAgICAgICAgICAgICAgdC5fdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHQuX2Rlc2MsXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSVNPKHQuX2R1ZSksXG4gICAgICAgICAgICAgICAgICAgIHQuX3ByaW9cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZygnYXNzZW1ibGVkIHByb2plY3Q6XFxuJyArIG5ld1Byb2plY3QpO1xuXG4gICAgICAgIHByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlVGFza3MoKSB7XG4gICAgbGV0IHRhc2tzRGF0YSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rhc2tzJykpO1xuICAgIGlmKCF0YXNrc0RhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Rhc2tzIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCd0YXNrcyBmb3VuZDpcXG4nICsgdGFza3NEYXRhKTtcbiAgICB0YXNrc0RhdGEuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgdGFza3MucHVzaChcbiAgICAgICAgICAgIG5ldyB0YXNrKFxuICAgICAgICAgICAgICAgIHQuX3RpdGxlLFxuICAgICAgICAgICAgICAgIHQuX2Rlc2MsXG4gICAgICAgICAgICAgICAgcGFyc2VJU08odC5fZHVlKSxcbiAgICAgICAgICAgICAgICB0Ll9wcmlvXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyh0YXNrcyk7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlTm90ZXMoKSB7XG4gICAgbGV0IG5vdGVzRGF0YSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25vdGVzJykpO1xuICAgIGlmKCFub3Rlc0RhdGEpIHJldHVybjtcbiAgICBub3Rlc0RhdGEuZm9yRWFjaChuID0+IHtcbiAgICAgICAgbm90ZXMucHVzaChcbiAgICAgICAgICAgIG4uX3RpdGxlLFxuICAgICAgICAgICAgbi5fZGVzYyxcbiAgICAgICAgICAgIG4uX2NvbG9yXG4gICAgICAgICk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0KG5ld1Byb2plY3QpIHtcbiAgICBpZihuZXdQcm9qZWN0KSB7XG4gICAgICAgIHByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvamVjdHMucHVzaChcbiAgICAgICAgbmV3IHByb2plY3QoXG4gICAgICAgICAgICAnTmV3IFByb2plY3QnLCBcbiAgICAgICAgICAgICdFbnRlciBEZXNjcmlwdGlvbidcbiAgICAgICAgKVxuICAgICk7XG4gICAgc2F2ZVByb2plY3RzKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlUHJvamVjdHMoKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RzJywgSlNPTi5zdHJpbmdpZnkocHJvamVjdHMpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhc2sobmV3VGFzaykge1xuICAgIGNvbnNvbGUubG9nKCdjcmVhdGluZyB0YXNrLi4nKTtcbiAgICBpZihuZXdUYXNrKSB7XG4gICAgICAgIHRhc2tzLnB1c2gobmV3VGFzayk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGFza3MucHVzaChcbiAgICAgICAgbmV3IHRhc2soXG4gICAgICAgICAgICAnTmV3IFRhc2snLFxuICAgICAgICAgICAgJ0VudGVyIERlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIG5ldyBEYXRlKCksXG4gICAgICAgICAgICAxXG4gICAgICAgIClcbiAgICApO1xuICAgIGNvbnNvbGUubG9nKHRhc2tzKTtcbiAgICBzYXZlVGFza3MoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVUYXNrcygpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGFza3MnLCBKU09OLnN0cmluZ2lmeSh0YXNrcykpO1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHRhc2tzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb3RlKG5ld05vdGUpIHtcbiAgICBpZihuZXdOb3RlKSB7XG4gICAgICAgIG5vdGVzLnB1c2gobmV3Tm90ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm90ZXMucHVzaChcbiAgICAgICAgbmV3IG5vdGUoXG4gICAgICAgICAgICAnTmV3IE5vdGUnLFxuICAgICAgICAgICAgJ0VudGVyIERldGFpbHMnLFxuICAgICAgICAgICAgJyNGRkZGRkYnXG4gICAgICAgIClcbiAgICApO1xuICAgIHNhdmVOb3RlcygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZU5vdGVzKCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdub3RlcycsIEpTT04uc3RyaW5naWZ5KG5vdGVzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXNrcygpIHsgcmV0dXJuIHRhc2tzOyB9XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvamVjdHMoKSB7IHJldHVybiBwcm9qZWN0czsgfVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vdGVzKCkgeyByZXR1cm4gbm90ZXM7IH0iLCJpbXBvcnQgdGFzayBmcm9tIFwiLi4vdGFza1wiO1xuaW1wb3J0ICogYXMgc3RvcmFnZSBmcm9tIFwiLi4vc3RvcmFnZVwiO1xuaW1wb3J0IHsgY29tcGFyZUFzYywgaXNUb2RheSB9IGZyb20gJ2RhdGUtZm5zJztcblxubGV0IHRpbWVzLCB0YXNrTGlzdCwgYWRkQnRuO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBjcmVhdGVUaW1lcygpO1xuICAgIGNyZWF0ZVRhc2tMaXN0KCk7XG4gICAgY3JlYXRlQWRkQnRuKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkQ29udGVudCgpIHtcbiAgICBsZXQgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb250ZW50Jyk7XG4gICAgY29udGVudC5hcHBlbmRDaGlsZCh0aW1lcyk7XG4gICAgY29udGVudC5hcHBlbmRDaGlsZCh0YXNrTGlzdCk7XG4gICAgY29udGVudC5hcHBlbmRDaGlsZChhZGRCdG4pO1xuICAgIHNldEFjdGl2ZVRpbWUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RheScpKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGFza0xpc3QoKSB7XG4gICAgbGV0IG5ld1Rhc2tMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbmV3VGFza0xpc3QuaWQgPSAndGFzay1saXN0JztcbiAgICB0YXNrTGlzdCA9IG5ld1Rhc2tMaXN0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBZGRCdG4oKSB7XG4gICAgbGV0IG5ld0FkZEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIG5ld0FkZEJ0bi5pZCA9ICdhZGQtYnRuJztcbiAgICBuZXdBZGRCdG4udGV4dENvbnRlbnQgPSAnKyc7XG4gICAgbmV3QWRkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc3RvcmFnZS5jcmVhdGVUYXNrKCkpO1xuICAgIGFkZEJ0biA9IG5ld0FkZEJ0bjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGltZXMoKSB7XG4gICAgbGV0IG5ld1RpbWVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBuZXdUaW1lcy5pZCA9ICd0aW1lcyc7XG5cbiAgICBuZXdUaW1lcy5pbm5lckhUTUwgPSBcbiAgICAgICAgXCI8YnV0dG9uIGlkPSdkYXknIGNsYXNzPSd0aW1lJz5EYXk8L2J1dHRvbj5cIiArXG4gICAgICAgIFwiPGJ1dHRvbiBpZD0nd2VlaycgY2xhc3M9J3RpbWUnPldlZWs8L2J1dHRvbj5cIiArXG4gICAgICAgIFwiPGJ1dHRvbiBpZD0nbW9udGgnIGNsYXNzPSd0aW1lJz5Nb250aDwvYnV0dG9uPlwiICtcbiAgICAgICAgXCI8YnV0dG9uIGlkPSd5ZWFyJyBjbGFzcz0ndGltZSc+WWVhcjwvYnV0dG9uPlwiICtcbiAgICAgICAgXCI8YnV0dG9uIGlkPSdhbGwnIGNsYXNzPSd0aW1lJz5BbGw8L2J1dHRvbj5cIjtcblxuICAgIG5ld1RpbWVzLnF1ZXJ5U2VsZWN0b3IoJyNkYXknKVxuICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHNldEFjdGl2ZVRpbWUoZS50YXJnZXQpKTtcblxuICAgIG5ld1RpbWVzLnF1ZXJ5U2VsZWN0b3IoJyN3ZWVrJylcbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiBzZXRBY3RpdmVUaW1lKGUudGFyZ2V0KSk7XG5cbiAgICBuZXdUaW1lcy5xdWVyeVNlbGVjdG9yKCcjbW9udGgnKVxuICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHNldEFjdGl2ZVRpbWUoZS50YXJnZXQpKTtcblxuICAgIG5ld1RpbWVzLnF1ZXJ5U2VsZWN0b3IoJyN5ZWFyJylcbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiBzZXRBY3RpdmVUaW1lKGUudGFyZ2V0KSk7XG5cbiAgICBuZXdUaW1lcy5xdWVyeVNlbGVjdG9yKCcjYWxsJylcbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiBzZXRBY3RpdmVUaW1lKGUudGFyZ2V0KSk7XG5cbiAgICB0aW1lcyA9IG5ld1RpbWVzO1xufVxuXG5mdW5jdGlvbiBzZXRBY3RpdmVUaW1lKGVsZW1lbnQpIHtcbiAgICBsZXQgdGltZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGltZScpO1xuICAgIHRpbWVzLmZvckVhY2goZSA9PiBlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIHJlbG9hZFRhc2tzKGVsZW1lbnQuaWQpO1xufVxuXG5mdW5jdGlvbiByZWxvYWRUYXNrcyh0aW1lKSB7XG4gICAgbGV0IHRhc2tzID0gc3RvcmFnZS5nZXRUYXNrcygpO1xuICAgIGxldCBwcm9qZWN0cyA9IHN0b3JhZ2UuZ2V0UHJvamVjdHMoKTtcblxuICAgIHRhc2tMaXN0LnRleHRDb250ZW50ID0gJyc7XG5cbiAgICBzd2l0Y2godGltZSkge1xuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgbGV0IGRheVRhc2tzID1cbiAgICAgICAgICAgICAgICAgICAgdGFza3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVG9kYXkoZS5kdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuZHVlIC0gYS5kdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRheVRhc2tzLmZvckVhY2goc2FtcGxlID0+IHtcbiAgICAgICAgICAgICAgICB0YXNrTGlzdC5hcHBlbmRDaGlsZChjcmVhdGVUYXNrKHNhbXBsZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2FsbCc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93ICdjb3VsZCBub3QgZmluZCcgKyB0aW1lICsgJyEnO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlVGFzayhzYW1wbGUpIHtcbiAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9XG4gICAgICAgIFwiPGRpdiBjbGFzcz0nYmFzaWMnPlwiICtcbiAgICAgICAgICAgIFwiPGRpdj5cIiArXG4gICAgICAgICAgICAgICAgXCI8aW5wdXQgdHlwZT0ndGV4dCc+XCIgK1xuICAgICAgICAgICAgICAgIFwiPGlucHV0IHR5cGU9J2RhdGUnPlwiICtcbiAgICAgICAgICAgIFwiPC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8ZGl2PlwiICtcbiAgICAgICAgICAgICAgICBcIjxpbnB1dCB0eXBlPSdjaGVja2JveCc+XCIgK1xuICAgICAgICAgICAgICAgIFwiPGJ1dHRvbiBjbGFzcz0nZGVsZXRlLXRhc2snPuKcljwvYnV0dG9uPlwiICtcbiAgICAgICAgICAgIFwiPC9kaXY+XCIgKyBcbiAgICAgICAgXCI8L2Rpdj5cIiArXG4gICAgICAgIFwiPGRpdiBjbGFzcz0nZGV0YWlscz5cIiArXG4gICAgICAgICAgICBcIjxkaXYgY2xhc3M9J3ByaW9yaXRpZXMnPlwiICtcbiAgICAgICAgICAgICAgICBcIjxidXR0b24gY2xhc3M9J3ByaW9yaXR5Jz4xPC9idXR0b24+XCIgKyBcbiAgICAgICAgICAgICAgICBcIjxidXR0b24gY2xhc3M9J3ByaW9yaXR5Jz4yPC9idXR0b24+XCIgKyBcbiAgICAgICAgICAgICAgICBcIjxidXR0b24gY2xhc3M9J3ByaW9yaXR5Jz4zPC9idXR0b24+XCIgKyBcbiAgICAgICAgICAgICAgICBcIjxidXR0b24gY2xhc3M9J3ByaW9yaXR5Jz40PC9idXR0b24+XCIgKyBcbiAgICAgICAgICAgICAgICBcIjxidXR0b24gY2xhc3M9J3ByaW9yaXR5Jz41PC9idXR0b24+XCIgKyBcbiAgICAgICAgICAgIFwiPC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8dGV4dGFyZWEgY2xhc3M9J2Rlc2NyaXB0aW9uJz48L3RleHRhcmVhPlwiICtcbiAgICAgICAgXCI8L2Rpdj5cIlxuICAgIHJldHVybiBjb250YWluZXI7XG59IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YoYXJndW1lbnQpID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjc3RyaW5nLWFyZ3VtZW50c1wiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSBkYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgc3RhcnRPZkRheSBmcm9tIFwiLi4vc3RhcnRPZkRheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNTYW1lRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aClcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIDA2OjAwOjAwIGFuZCA0IFNlcHRlbWJlciAxODowMDowMCBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCwgNiwgMCksIG5ldyBEYXRlKDIwMTQsIDgsIDQsIDE4LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgYW5kIDQgT2N0b2JlciBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTQsIDksIDQpKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIsIDIwMTQgYW5kIDQgU2VwdGVtYmVyLCAyMDE1IGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNSwgOCwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTYW1lRGF5KGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnRTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIGRhdGVSaWdodFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZVJpZ2h0KTtcbiAgcmV0dXJuIGRhdGVMZWZ0U3RhcnRPZkRheS5nZXRUaW1lKCkgPT09IGRhdGVSaWdodFN0YXJ0T2ZEYXkuZ2V0VGltZSgpO1xufSIsImltcG9ydCBpc1NhbWVEYXkgZnJvbSBcIi4uL2lzU2FtZURheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNUb2RheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdG9kYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyA2IE9jdG9iZXIgMjAxNCwgaXMgNiBPY3RvYmVyIDE0OjAwOjAwIHRvZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNUb2RheShuZXcgRGF0ZSgyMDE0LCA5LCA2LCAxNCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RvZGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGlzU2FtZURheShkaXJ0eURhdGUsIERhdGUubm93KCkpO1xufSIsImltcG9ydCAqIGFzIHRhc2tVSSBmcm9tICcuL3Rhc2tVSSc7XG5pbXBvcnQgKiBhcyBwcm9qZWN0VUkgZnJvbSAnLi9wcm9qZWN0VUknO1xuaW1wb3J0ICogYXMgbm90ZVVJIGZyb20gJy4vbm90ZVVJJztcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVRhYnMoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Rhc2tzLXRhYicpXG4gICAgICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFiKGUudGFyZ2V0KTtcbiAgICAgICAgICAgIHRhc2tVSS5sb2FkQ29udGVudCgpO1xuICAgICAgICB9KTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdHMtdGFiJylcbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYWIoZS50YXJnZXQpO1xuICAgICAgICAgICAgcHJvamVjdFVJLmxvYWRDb250ZW50KCk7XG4gICAgICAgIH0pO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNub3Rlcy10YWInKVxuICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgIHNldEFjdGl2ZVRhYihlLnRhcmdldCk7XG4gICAgICAgICAgICBub3RlVUkubG9hZENvbnRlbnQoKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZVRhYihlbGVtZW50KSB7XG4gICAgbGV0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFiJyk7XG4gICAgdGFicy5mb3JFYWNoKGUgPT4ge2UuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7fSk7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdGlhbGl6ZVVJKCkge1xuICAgIGluaXRpYWxpemVUYWJzKCk7XG4gICAgc2V0QWN0aXZlVGFiKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YXNrcy10YWInKSk7XG4gICAgdGFza1VJLmluaXRpYWxpemUoKTtcbiAgICB0YXNrVUkubG9hZENvbnRlbnQoKTtcbn0iLCJmdW5jdGlvbiBsb2FkQ29udGVudCgpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpLnRleHRDb250ZW50ID0gJyc7XG59XG5cbmV4cG9ydCB7XG4gICAgbG9hZENvbnRlbnRcbn07IiwiZnVuY3Rpb24gbG9hZENvbnRlbnQoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQnKS50ZXh0Q29udGVudCA9ICcnO1xufVxuXG5leHBvcnQge1xuICAgIGxvYWRDb250ZW50XG59OyJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInRpdGxlIiwiZGVzYyIsInRoaXMiLCJfdGl0bGUiLCJfZGVzYyIsIm5ld1RpdGxlIiwiX25hbWUiLCJuZXdEZXNjIiwiYWRkVGFzayIsInRhc2siLCJwdXNoIiwiRGF0ZSIsImdldFRhc2tzIiwiZHVlIiwicHJpbyIsIl9kdWUiLCJfcHJpbyIsIm5ld0R1ZSIsIm5ld1ByaW8iLCJNYXRoIiwicG93IiwibWlsbGlzZWNvbmRzSW5Ib3VyIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwibGVuZ3RoIiwiVHlwZUVycm9yIiwidG9JbnRlZ2VyIiwiZGlydHlOdW1iZXIiLCJOYU4iLCJudW1iZXIiLCJOdW1iZXIiLCJpc05hTiIsImNlaWwiLCJmbG9vciIsInBhcnNlSVNPIiwiYXJndW1lbnQiLCJvcHRpb25zIiwiX29wdGlvbnMkYWRkaXRpb25hbERpIiwiYXJndW1lbnRzIiwiYWRkaXRpb25hbERpZ2l0cyIsIlJhbmdlRXJyb3IiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJkYXRlIiwiZGF0ZVN0cmluZ3MiLCJzcGxpdERhdGVTdHJpbmciLCJwYXJzZVllYXJSZXN1bHQiLCJwYXJzZVllYXIiLCJwYXJzZURhdGUiLCJyZXN0RGF0ZVN0cmluZyIsInllYXIiLCJnZXRUaW1lIiwib2Zmc2V0IiwidGltZXN0YW1wIiwidGltZSIsInBhcnNlVGltZSIsInRpbWV6b25lIiwiZGlydHlEYXRlIiwicmVzdWx0Iiwic2V0RnVsbFllYXIiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsInNldEhvdXJzIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBhcnNlVGltZXpvbmUiLCJwYXR0ZXJucyIsImRhdGVUaW1lRGVsaW1pdGVyIiwidGltZVpvbmVEZWxpbWl0ZXIiLCJkYXRlUmVnZXgiLCJ0aW1lUmVnZXgiLCJ0aW1lem9uZVJlZ2V4IiwiZGF0ZVN0cmluZyIsInRpbWVTdHJpbmciLCJhcnJheSIsInNwbGl0IiwidGVzdCIsInN1YnN0ciIsInRva2VuIiwiZXhlYyIsInJlcGxhY2UiLCJyZWdleCIsIlJlZ0V4cCIsImNhcHR1cmVzIiwibWF0Y2giLCJwYXJzZUludCIsImNlbnR1cnkiLCJzbGljZSIsImlzV2Vla0RhdGUiLCJkYXlPZlllYXIiLCJwYXJzZURhdGVVbml0IiwibW9udGgiLCJkYXkiLCJ3ZWVrIiwiZGF5T2ZXZWVrIiwiX3llYXIiLCJ2YWxpZGF0ZVdlZWtEYXRlIiwiaXNvV2Vla1llYXIiLCJzZXRVVENGdWxsWWVhciIsImRpZmYiLCJnZXRVVENEYXkiLCJzZXRVVENEYXRlIiwiZGF5T2ZJU09XZWVrWWVhciIsImRheXNJbk1vbnRocyIsImlzTGVhcFllYXJJbmRleCIsInZhbGlkYXRlRGF0ZSIsInZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSIsIm1heCIsInZhbHVlIiwiaG91cnMiLCJwYXJzZVRpbWVVbml0IiwibWludXRlcyIsInNlY29uZHMiLCJ2YWxpZGF0ZVRpbWUiLCJwYXJzZUZsb2F0IiwidGltZXpvbmVTdHJpbmciLCJzaWduIiwiX2hvdXJzIiwidmFsaWRhdGVUaW1lem9uZSIsInRpbWVzIiwidGFza0xpc3QiLCJhZGRCdG4iLCJwcm9qZWN0cyIsInRhc2tzIiwibm90ZXMiLCJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ0b0RhdGUiLCJhcmdTdHIiLCJjb25zb2xlIiwid2FybiIsIkVycm9yIiwic3RhY2siLCJzdGFydE9mRGF5IiwiaXNTYW1lRGF5IiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiZGF0ZUxlZnRTdGFydE9mRGF5IiwiZGF0ZVJpZ2h0U3RhcnRPZkRheSIsImxvYWRDb250ZW50IiwiY29udGVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFwcGVuZENoaWxkIiwic2V0QWN0aXZlVGltZSIsImVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImRheVRhc2tzIiwiZmlsdGVyIiwibm93IiwiaXNUb2RheSIsInNvcnQiLCJhIiwiYiIsInNhbXBsZSIsImNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJyZWxvYWRUYXNrcyIsImlkIiwic2V0QWN0aXZlVGFiIiwibG9nIiwicHJvamVjdHNEYXRhIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInAiLCJuZXdQcm9qZWN0IiwidCIsInJldHJpZXZlUHJvamVjdHMiLCJ0YXNrc0RhdGEiLCJyZXRyaWV2ZVRhc2tzIiwibm90ZXNEYXRhIiwibiIsIl9jb2xvciIsInJldHJpZXZlTm90ZXMiLCJhZGRFdmVudExpc3RlbmVyIiwidGFyZ2V0IiwibmV3VGltZXMiLCJjcmVhdGVUaW1lcyIsIm5ld1Rhc2tMaXN0IiwiY3JlYXRlVGFza0xpc3QiLCJuZXdBZGRCdG4iLCJuZXdUYXNrIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImNyZWF0ZUFkZEJ0biJdLCJzb3VyY2VSb290IjoiIn0=