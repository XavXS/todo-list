(()=>{"use strict";let t;function e(t){document.querySelectorAll(".time").forEach((t=>t.classList.remove("active"))),t.classList.add("active")}function o(){document.querySelector("#content").textContent="",t||(t=function(){let t=document.createElement("div");return t.id="times",t.innerHTML="<button id='day' class='time'>Day</button><button id='week' class='time'>Week</button><button id='month' class='time'>Month</button><button id='year' class='time'>Year</button><button id='all' class='time'>All</button>",t.querySelector("#day").addEventListener("click",(t=>{e(t.target)})),t.querySelector("#week").addEventListener("click",(t=>{e(t.target)})),t.querySelector("#month").addEventListener("click",(t=>{e(t.target)})),t.querySelector("#year").addEventListener("click",(t=>{e(t.target)})),t.querySelector("#all").addEventListener("click",(t=>{e(t.target)})),t}()),document.querySelector("#content").appendChild(t),e(document.querySelector(".time"))}function n(t){document.querySelectorAll(".tab").forEach((t=>{t.classList.remove("active")})),t.classList.add("active")}class s{#t;constructor(t,e){this._title=t,this._desc=e,this.#t=[]}get title(){return this._title}set title(t){this._name=t}get desc(){return this._desc}set desc(t){this._desc=t}addTask(t){t?this.#t.push(t):this.#t.push(new t("New Task","Enter Description",new Date,1))}}class r{constructor(t,e,o,n){this._title=t,this._desc=e,this._due=o,this._prio=n}get title(){return this._title}set title(t){this._title=t}get desc(){return this._desc}set desc(t){this._desc=t}get due(){return this._due}set due(t){this._due=t}get prio(){return this._prio}set prio(t){this._prio=t}}function c(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function i(t){c(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===a(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}let l=[],u=[],d=[];!function(){console.log("retrieving projects data...");let t=JSON.parse(localStorage.getItem("projects"));t?(console.log("found projects data:\n"+t),t.forEach((t=>{console.log("found project data:\n"+t);let e=new s(t.title,t.desc);t.tasks.forEach((t=>{console.log("found task data:\n"+t),e.addTask(new r(t.title,t.desc,i(t.due),t.prio))})),console.log("assembled project:\n"+e),l.push(e)}))):console.log("projects data could not be found")}(),JSON.parse(localStorage.getItem("tasks")).forEach((t=>{u.push(t.title,t.desc,i(t.due),t.prio)})),JSON.parse(localStorage.getItem("notes")).forEach((t=>{d.push(t.title,t.desc,t.color)})),document.querySelector("#tasks-tab").addEventListener("click",(t=>{n(t.target),o()})),document.querySelector("#projects-tab").addEventListener("click",(t=>{n(t.target),document.querySelector("#content").textContent=""})),document.querySelector("#notes-tab").addEventListener("click",(t=>{n(t.target),document.querySelector("#content").textContent=""})),n(document.querySelector(".tab")),o()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,