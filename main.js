(()=>{"use strict";class t{#t;constructor(t,e){this._title=t,this._desc=e,this.#t=[]}get title(){return this._title}set title(t){this._name=t}get desc(){return this._desc}set desc(t){this._desc=t}addTask(t){t?this.#t.push(t):this.#t.push(new t("New Task","Enter Description",new Date,1))}getTasks(){return this.#t}}class e{constructor(t,e,n,r){this._title=t,this._desc=e,this._due=n,this._prio=r}get title(){return this._title}set title(t){this._title=t}get desc(){return this._desc}set desc(t){this._desc=t}get due(){return this._due}set due(t){this._due=t}get prio(){return this._prio}set prio(t){this._prio=t}}Math.pow(10,8);var n=36e5;function r(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function o(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function a(t,e){var n;r(1,arguments);var a=o(null!==(n=null==e?void 0:e.additionalDigits)&&void 0!==n?n:2);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var i,s=u(t);if(s.date){var c=d(s.date,a);i=f(c.restDateString,c.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var l,p=i.getTime(),m=0;if(s.time&&(m=g(s.time),isNaN(m)))return new Date(NaN);if(!s.timezone){var v=new Date(p+m),y=new Date(0);return y.setFullYear(v.getUTCFullYear(),v.getUTCMonth(),v.getUTCDate()),y.setHours(v.getUTCHours(),v.getUTCMinutes(),v.getUTCSeconds(),v.getUTCMilliseconds()),y}return l=h(s.timezone),isNaN(l)?new Date(NaN):new Date(p+m+l)}var i={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},s=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,c=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,l=/^([+-])(\d{2})(?::?(\d{2}))?$/;function u(t){var e,n={},r=t.split(i.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?e=r[0]:(n.date=r[0],e=r[1],i.timeZoneDelimiter.test(n.date)&&(n.date=t.split(i.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var o=i.timezone.exec(e);o?(n.time=e.replace(o[1],""),n.timezone=o[1]):n.time=e}return n}function d(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:t.slice((r[1]||r[2]).length)}}function f(t,e){if(null===e)return new Date(NaN);var n=t.match(s);if(!n)return new Date(NaN);var r=!!n[4],o=p(n[1]),a=p(n[2])-1,i=p(n[3]),c=p(n[4]),l=p(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,c,l)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var o=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(e,c,l):new Date(NaN);var u=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(v[e]||(y(t)?29:28))}(e,a,i)&&function(t,e){return e>=1&&e<=(y(t)?366:365)}(e,o)?(u.setUTCFullYear(e,a,Math.max(o,i)),u):new Date(NaN)}function p(t){return t?parseInt(t):1}function g(t){var e=t.match(c);if(!e)return NaN;var r=m(e[1]),o=m(e[2]),a=m(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(r,o,a)?r*n+6e4*o+1e3*a:NaN}function m(t){return t&&parseFloat(t.replace(",","."))||0}function h(t){if("Z"===t)return 0;var e=t.match(l);if(!e)return 0;var r="+"===e[1]?-1:1,o=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?r*(o*n+6e4*a):NaN}var v=[31,null,31,30,31,30,31,31,30,31,30,31];function y(t){return t%400==0||t%4==0&&t%100!=0}let b,N,S,k=[],w=[],D=[];function _(){localStorage.setItem("tasks",JSON.stringify(w)),console.log(JSON.stringify(w))}function E(){return w}function T(t){const e=w.indexOf(t);e>-1&&w.splice(e,1),_()}function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function q(t){r(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===C(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function L(t){r(1,arguments);var e=q(t);return e.setHours(0,0,0,0),e}function x(t,e){r(2,arguments);var n=L(t),o=L(e);return n.getTime()===o.getTime()}function j(){let t=document.querySelector("#content");t.appendChild(b),t.appendChild(N),t.appendChild(S),U(document.querySelector("#day"))}function U(t){document.querySelectorAll(".time").forEach((t=>t.classList.remove("active"))),t.classList.add("active"),function(t){let e=E();switch(N.textContent="",t){case"day":let n=e.filter((t=>function(t){return r(1,arguments),x(t,Date.now())}(t.due))).sort(((t,e)=>e.due-t.due));n.forEach((t=>{N.appendChild(function(t){let e=document.createElement("div");return e.innerHTML="<div class='basic'><div class='info'><input type='text'><input type='date'></div><div class='actions'><input type='checkbox' class='expand'><button class='delete'>âœ–</button></div></div><div class='details><div class='priorities'><button class='priority'>1</button><button class='priority'>2</button><button class='priority'>3</button><button class='priority'>4</button><button class='priority'>5</button></div><textarea class='description'></textarea></div>",e.querySelector(".expand").addEventListener("change",(t=>{t.target.checked?console.log("expand checked"):console.log("expand unchecked")})),e.querySelector(".delete").addEventListener("click",(n=>{e.remove(),T(t)})),e.querySelector(".details"),e}(t))}));break;case"week":case"month":case"year":case"all":break;default:throw"could not find"+t+"!"}}(t.id)}function I(t){document.querySelectorAll(".tab").forEach((t=>{t.classList.remove("active")})),t.classList.add("active")}!function(){console.log("retrieving projects data...");let n=JSON.parse(localStorage.getItem("projects"));n?(console.log("found projects data:\n"+n),n.forEach((n=>{console.log("found project data:\n"+n);let r=new t(n.title,n.desc);n.tasks.forEach((t=>{console.log("found task data:\n"+t),r.addTask(new e(t._title,t._desc,a(t._due),t._prio))})),console.log("assembled project:\n"+r),k.push(r)}))):console.log("projects data could not be found")}(),function(){let t=JSON.parse(localStorage.getItem("tasks"));t?(console.log("tasks found:\n"+t),t.forEach((t=>{w.push(new e(t._title,t._desc,a(t._due),t._prio))})),console.log(w)):console.log("tasks not found")}(),function(){let t=JSON.parse(localStorage.getItem("notes"));t&&t.forEach((t=>{D.push(t._title,t._desc,t._color)}))}(),document.querySelector("#tasks-tab").addEventListener("click",(t=>{I(t.target),j()})),document.querySelector("#projects-tab").addEventListener("click",(t=>{I(t.target),document.querySelector("#content").textContent=""})),document.querySelector("#notes-tab").addEventListener("click",(t=>{I(t.target),document.querySelector("#content").textContent=""})),I(document.querySelector("#tasks-tab")),function(){let t=document.createElement("div");t.id="times",t.innerHTML="<button id='day' class='time'>Day</button><button id='week' class='time'>Week</button><button id='month' class='time'>Month</button><button id='year' class='time'>Year</button><button id='all' class='time'>All</button>",t.querySelector("#day").addEventListener("click",(t=>U(t.target))),t.querySelector("#week").addEventListener("click",(t=>U(t.target))),t.querySelector("#month").addEventListener("click",(t=>U(t.target))),t.querySelector("#year").addEventListener("click",(t=>U(t.target))),t.querySelector("#all").addEventListener("click",(t=>U(t.target))),b=t}(),function(){let t=document.createElement("div");t.id="task-list",N=t}(),function(){let t=document.createElement("button");t.id="add-btn",t.textContent="+",t.addEventListener("click",(()=>(console.log("creating task.."),w.push(new e("New Task","Enter Description",new Date,1)),console.log(w),void _()))),S=t}(),j()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,